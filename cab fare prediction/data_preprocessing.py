{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from math import sin,cos,atan2,sqrt,radians,asin\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from datetime import datetime \n",
    "import calendar\n",
    "import re\n",
    "\n",
    "def data_cleaning_stage_cooridnates(df):   \n",
    "    #function to validate the latitude and longitude values\n",
    "    value=[]\n",
    "    def outliers(x,col,r,l):\n",
    "\n",
    "        q75, q25 = np.percentile(df['fare_amount'], [75 ,25])\n",
    "        #Calculate IQR\n",
    "        iqr = q75 - q25\n",
    "        #Calculate inner and outer fence\n",
    "        minimum = float(q25 - (iqr*1.5))\n",
    "        maximum = float(q75 + (iqr*1.5))\n",
    "        mean_dt = df[col].mean()\n",
    "        if (x < l)|(x > r):           \n",
    "            return mean_dt\n",
    "        elif x < minimum:\n",
    "            return mean_dt\n",
    "        elif x > maximum:\n",
    "            return mean_dt\n",
    "        else:\n",
    "            return round(x,3)\n",
    "\n",
    "    df['pickup_latitude']=df.apply(lambda row:outliers(row['pickup_latitude'],'pickup_latitude',90.0,-90.0),axis=1)\n",
    "    df['dropoff_latitude']=df.apply(lambda row:outliers(row['dropoff_latitude'],'dropoff_latitude',90.0,-90.0),axis=1)\n",
    "    df['pickup_longitude']=df.apply(lambda row:outliers(row['pickup_longitude'],'pickup_longitude',180.0,-180.0),axis=1)\n",
    "    df['dropoff_longitude']=df.apply(lambda row:outliers(row['dropoff_longitude'],'dropoff_longitude',180.0,-180.0),axis=1)\n",
    "    \n",
    "        \n",
    "    #function to calculate distance bewteen 2 cooridinates    \n",
    "    def calculateDistance(lat1,long1,lat2,long2):\n",
    "        radius = 6371\n",
    "        dlat = np.abs(np.radians(lat1)-np.radians(lat2))\n",
    "        dlong = np.abs(np.radians(long1)-np.radians(long2))\n",
    "        t1 = (np.sin(dlat/2)**2)+(np.cos(radians(lat1))*np.cos(radians(lat2))*np.sin(dlong/2)**2)\n",
    "        t2 = 2*(atan2(np.sqrt(t1),np.sqrt(1-t1)))\n",
    "        return radius*t2\n",
    "    \n",
    "    df['distance']=df.apply(lambda row:calculateDistance(row['pickup_latitude'],row['pickup_longitude'],row['dropoff_latitude'],row['dropoff_longitude']),axis=1)      \n",
    "    return df\n",
    "\n",
    "def calculateDateTime(df):\n",
    "    mode_dt = df['pickup_datetime'].mode()[0]\n",
    "    print(mode_dt)\n",
    "    #regular expression to validate time format\n",
    "    #replace the date string with mode value if the date doesnot match\n",
    "    def date_validation(str1):\n",
    "        r = re.compile('[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9] [0-9][0-9]:[0-9][0-9]:[0-9][0-9] UTC')\n",
    "        if r.match(str1):           \n",
    "            return str1\n",
    "        else:\n",
    "            return mode_dt\n",
    "        \n",
    "    def time_date_outliers(value,x,lower,upper):\n",
    "        value = int(value)\n",
    "        if (value < lower|value > upper):\n",
    "            return df[x].mode()\n",
    "        return value\n",
    "        \n",
    "    df['pickup_datetime']=df.apply(lambda row:date_validation(str(row['pickup_datetime'])),axis=1)\n",
    "    df['pickup_datetime']=pd.to_datetime(df['pickup_datetime'],format='%Y-%m-%d %H:%M:%S UTC')\n",
    "    df['day_week']=df['pickup_datetime'].apply(lambda x:calendar.day_name[x.weekday()])\n",
    "    df['date']= df['pickup_datetime'].dt.date\n",
    "    df['day']=df['pickup_datetime'].apply(lambda x:x.day)\n",
    "    df['hr']=df['pickup_datetime'].apply(lambda x:x.hour)\n",
    "    df['month']=df['pickup_datetime'].apply(lambda x:x.month)\n",
    "    df['year']=df['pickup_datetime'].apply(lambda x:x.year)\n",
    "    \n",
    "    #month validation\n",
    "    df[\"month\"]=df.apply(lambda row: time_date_outliers(row[\"month\"],\"month\",1,12) if (row[\"month\"] not in range(0,13)) else row[\"month\"],axis=1)\n",
    "        \n",
    "    #day validation\n",
    "    df[\"day\"]=df.apply(lambda row: time_date_outliers(row[\"day\"],\"day\",1,30) if (row[\"month\"] in [4,6,9,11]) else row[\"month\"],axis=1)\n",
    "    df[\"day\"]=df.apply(lambda row: time_date_outliers(row[\"day\"],\"day\",1,31) if (row[\"month\"] in [1,3,5,7,8,10,12]) else row[\"month\"],axis=1)\n",
    "    df[\"day\"]=df.apply(lambda row: time_date_outliers(row[\"day\"],\"day\",1,31) if (row[\"month\"] == 2) else row[\"month\"],axis=1)\n",
    "    \n",
    "    print(\"end of date time validation\")\n",
    "    return df\n",
    "\n",
    "def calculateFare(df):\n",
    "    df[df['fare_amount']<0]['fare_amount']=np.nan\n",
    "    df['fare_amount']=df['fare_amount'].astype(np.float64)\n",
    "    q75, q25 = np.percentile(df['fare_amount'], [75 ,25])\n",
    "    \n",
    "    #Calculate IQR\n",
    "    iqr = q75 - q25\n",
    "    \n",
    "    #Calculate inner and outer fence\n",
    "    minimum = q25 - (iqr*1.5)\n",
    "    maximum = q75 + (iqr*1.5)\n",
    "    \n",
    "    #Replace with NA\n",
    "    df.loc[df['fare_amount'] < minimum,:'fare_amount'] = np.nan\n",
    "    df.loc[df['fare_amount'] > maximum,:'fare_amount'] = np.nan\n",
    "\n",
    "    #Calculate missing value\n",
    "    missing_val =df['fare_amount'].isnull().sum()\n",
    "    print(missing_val)\n",
    "      \n",
    "    #Impute with mean\n",
    "    df['fare_amount'] = df['fare_amount'].fillna(df['fare_amount'].mean())\n",
    "    \n",
    "    print(\"missing values:,\",df['fare_amount'].isnull().sum())\n",
    "\n",
    "    return df \n",
    "\n",
    "    #df['date']=df['pickup_datetime'].str.rsplit(\" \", n=2, expand=True)[0]\n",
    "    #df['time']=df['pickup_datetime'].str.rsplit(\" \", n=2, expand=True)[1]\n",
    "    #df['year']=df['date'].str.rsplit(\"-\", n=3, expand=True)[0]\n",
    "    #df['month']=pd.to_numeric(df['date'].str.rsplit(\"-\", n=3, expand=True)[1])\n",
    "    #df['day']=pd.to_numeric(df['date'].str.rsplit(\"-\", n=3, expand=True)[2])\n",
    "    #df['hr']=pd.to_numeric(df['time'].str.rsplit(\":\", n=2, expand=True)[0])\n",
    "    \n",
    "    "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
